datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  bio           String?
  role          Role
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  startups      Startup[]
  applications  Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Startup {
  id                String        @id @default(cuid())
  title             String
  description       String        @db.Text
  category          String?
  image             String? // URL to startup image
  pitch             String        @db.Text
  postedById        String
  postedBy          User          @relation(fields: [postedById], references: [id])
  isActive          Boolean       @default(true)
  currentApplicants Int           @default(0)
  maxApplicants     Int
  currentyHired     Int           @default(0)
  hiringQuantity    Int
  applications      Application[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Application {
  id          String            @id @default(cuid())
  startupId   String
  startup     Startup           @relation(fields: [startupId], references: [id])
  applicantId String
  user        User              @relation(fields: [applicantId], references: [id])
  status      ApplicationStatus @default(PENDING)
  email       String?
  github      String?
  twitter     String?
  linkedin    String?
  hiredAt     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([startupId, applicantId])
}

enum Role {
  FOUNDER
  CANDIDATE
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
